labs(title = "Average Score per Variable on Service Aspect",
x = "Variable", y = "Mean Score") +
scale_fill_manual(values = c("Needs Improvement" = "#FF9D23",
"Medium" = "#B4E50D",
"Good" = "#78C841")) +
theme_minimal()
ggplotly(plot_service_stat)
#show(plot_service_stat)
View(df)
#head(df_stats)
datatable(df_stats, caption = "Statistic Descriptive of Each Variables Based on Their Aspects")
#check unique value in home campus
unique(df$home_campus)
#check how many respondent who inserted "binus@greater jakarta"
sum(df$home_campus == "binus@greater jakarta", na.rm = TRUE)
segment_satis_scheme <- c(
"Bad" = "#F93827",
"Quite Bad" = "#FF9D23",
"Good" = "#B4E50D",
"Excellent" = "#78C841"
)
#plot to count segmentation satisfaction
plot_segment_satis <- ggplot(df, aes(x = home_campus, fill = satisfaction_category))+
geom_bar()+
labs(
title = "Satisfaction per Home Campus Segmentation",
x = "Home Campuses",
y = "Count"
)+
scale_fill_manual(values = segment_satis_scheme)
#show(plot_segment_satis)
ggplotly(plot_segment_satis)
#duplicate the df to new dataframe focusing on mean score per home campuses
mean_satisfaction_home_campus <- df %>%
group_by(home_campus) %>%
summarise(
responses = n(),
service_sd = sd(rowMeans(select(cur_data(), all_of(cols_services)), na.rm = TRUE), na.rm = TRUE) %>% round(3),
cleanliness_sd = sd(rowMeans(select(cur_data(), all_of(cols_cleanliness)), na.rm = TRUE), na.rm = TRUE) %>% round(3),
product_sd = sd(rowMeans(select(cur_data(), all_of(cols_product)), na.rm = TRUE), na.rm = TRUE) %>% round(3),
services_score = mean(mean_services_score) %>% round(digits = 3),
cleanliness_score = mean(mean_cleanliness_score) %>% round(digits = 3),
product_score = mean(mean_product_score) %>% round(digits = 3),
overall_score = mean(mean_satisfaction_score) %>% round(digits = 3)
)
#make the df to long format
long_mean_satisfaction_home_campus <- mean_satisfaction_home_campus %>%
pivot_longer(cols = c(services_score, cleanliness_score, product_score), names_to = "aspect", values_to = "score")
#Binning the score
long_mean_satisfaction_home_campus <- long_mean_satisfaction_home_campus %>% mutate(
category = case_when(
score > 4 ~ "Exellent",
score >= 3.9 ~ "Good",
TRUE ~ "Needs Improvement"
)
)
#make a color scheme
mean_satisfaction_home_campus_scheme <- c(
"services_score" = "#FF9D23",
"cleanliness_score" = "#B4E50D",
"product_score" = "#78C841"
)
plot_satis_aspect_per_home_campus <- ggplot(long_mean_satisfaction_home_campus, aes(x = home_campus, y = score, fill = aspect)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Score per Aspect by Home Campus",
x = "Home Campus", y = "Score") +
scale_fill_manual(values = mean_satisfaction_home_campus_scheme) +
theme_minimal()
#show(plot_satis_aspect_per_home_campus)
ggplotly(plot_satis_aspect_per_home_campus)
#head(mean_satisfaction_home_campus)
datatable(mean_satisfaction_home_campus, caption = "Aspects Score Group by Home Campus")
#check unique value in home campus
unique(df$major)
df <- df %>% mutate(
major_group = case_when(
major %in% c("computer science", "computer science - software engineering", "artificial intelligence", "data science", "cyber security", "computer engineering", "information systems") ~ "Tech",
major %in% c("game application and technology", "interior design") ~ "Design",
major %in% c("digital business", "communication - marketing communication", "public relations") ~ "Business/Communication",
TRUE ~ "others"
)
)
#export to csv file
export_major_grouped_df <- df
write.csv(export_major_grouped_df, "5th_grouped_major_added_questionnaire_results.csv", row.names = FALSE)
#duplicate the df to new dataframe focusin on mean score per major
mean_satisfaction_major <- df %>%
group_by(major_group) %>%
summarise(
responses = n(),
services_score = mean(mean_services_score) %>% round(digits = 3),
service_sd = df %>% select(all_of(cols_services)) %>% rowMeans(na.rm = TRUE) %>% sd(na.rm = TRUE) %>% round(3),
cleanliness_score = mean(mean_cleanliness_score) %>% round(digits = 3),
cleanliness_sd = df %>% select(all_of(cols_cleanliness)) %>% rowMeans(na.rm = TRUE) %>% sd(na.rm = TRUE) %>% round(3),
product_score = mean(mean_product_score) %>% round(digits = 3),
product_sd = df %>% select(all_of(cols_product)) %>% rowMeans(na.rm = TRUE) %>% sd(na.rm = TRUE) %>% round(3),
overall_score = mean(mean_satisfaction_score) %>% round(digits = 3)
)
#make the df to long format
long_mean_satisfaction_major <- mean_satisfaction_major %>%
pivot_longer(cols = c(services_score, cleanliness_score, product_score), names_to = "aspect", values_to = "score")
#Binning the score
long_mean_satisfaction_major <- long_mean_satisfaction_major %>% mutate(
category = case_when(
score > 4 ~ "Exellent",
score >= 3.9 ~ "Good",
TRUE ~ "Needs Improvement"
)
)
#make a color scheme
mean_satisfaction_major_scheme <- c(
"services_score" = "#FF9D23",
"cleanliness_score" = "#B4E50D",
"product_score" = "#78C841"
)
plot_satis_aspect_per_major <- ggplot(long_mean_satisfaction_major, aes(x = major_group, y = score, fill = aspect)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Score per Aspect by Grouped Majors",
x = "Home Campus", y = "Score") +
scale_fill_manual(values = mean_satisfaction_major_scheme) +
theme_minimal()
#show(plot_satis_aspect_per_major)
ggplotly(plot_satis_aspect_per_major)
#head(mean_satisfaction_major)
datatable(mean_satisfaction_major, caption = "Aspects Score by Grouped Majors")
ggplotly(plot_clean_stat)
ggplotly(plot_product_stat)
ggplotly(plot_service_stat)
View(df)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(ggplot2)
library(plotly)
library(dplyr)
library(tidyr)
library(readxl)
library(knitr)
library(DT)
library(lubridate) #to process the time stamp
dirty_df <- read_excel("questionaire_result.xlsx")
# this code is used to see all the missing value in each columns
colSums(is.na(dirty_df))
na_count <- colSums(is.na(dirty_df))
na_cols <- names(na_count[na_count > 0])
cat("Missing values is founded in:\n")
for (col in na_cols) {
cat(col, ":", na_count[col], "missing value(s)\n")
}
df <- na.omit(dirty_df)
sum(is.na(df$home_campus))
get_mode <- function(v) {
uniqv <- na.omit(unique(v))
uniqv[which.max(tabulate(match(v, uniqv)))]
}
df$major[is.na(df$major)] <- get_mode(df$major)
new_na_count <- colSums(is.na(df))
na_cols <- names(new_na_count[new_na_count > 0])
cat("Missing values after deletion and imputation:\n")
cat("major:", sum(is.na(df$major)), "\n")
cat("home_campus:", sum(is.na(df$home_campus)))
#likert columns
likert_cols <- df %>% select(where(is.character),
-c(major,
active_mobility,
home_campus,
frequency_visiting_canteen,
advice_for_services,
cleanliness_advice,
facility_advice,
product_advice
)) %>% names()
cat("Before mutation:", paste(unique(df$staff_response), collapse = ", "), "\n")
#get every categorical column
cat_cols <- df %>%select(where(is.character)) %>% names()
#mutate every category to lowercase
df <- df %>% mutate(across(all_of(cat_cols), ~ tolower(.)))
#make a copy of dataframe to be extracted in csv format
export_mutated_df <- df
write.csv(export_mutated_df, "1st_cleaned_mutated_questionnaire_results.csv", row.names = FALSE)
cat("After mutation:", paste(unique(df$staff_response), collapse = ", "))
#make a temporary dataframe to obtain the date and time
selected_time_col <- c("start_time", "completion_time")
temporary <- df[selected_time_col]
#extract date
temporary$date <- as.Date(df$start_time)
#extract start time and finish
temporary$started_time <- format(df$start_time, "%H:%M:%S")
temporary$finished_time <- format(df$completion_time, "%H:%M:%S")
#calculate duration in minutes
temporary$durations <- as.numeric(difftime(temporary$completion_time, df$start_time, units = "mins") %>% round(digits = 2))
df$date <- temporary$date
df$start_time <- temporary$started_time
df$completion_time <- temporary$finished_time
df$duration <- temporary$durations
#head(temporary %>% select(start_time, completion_time))
datatable(temporary %>% select(start_time, completion_time), caption = "Default Timestamp")
#head(df %>% select(ID, major, date, start_time, completion_time, duration))
datatable(df %>% select(ID, major, date, start_time, completion_time, duration), caption = "Separated Timestamp")
#cat("Unique value for frequency of respondent visit canteen: ", paste(unique(df$frequency_visiting_canteen), collapse = ", "), "\n")
cat("Unique value for every likert scale: ", paste(unique(df$friendly_staff), collapse = ", "))
#scales
likert_scale <- c("sangat tidak setuju", "tidak setuju", "tidak merasakan", "setuju", "sangat setuju")
df[likert_cols] <- lapply(df[likert_cols], function(col) match(col, likert_scale))
#freq
#frequency <- c("0 kali", "1-2 kali", "3-4 kali", ">4 kali")
#df$frequency_visiting_canteen <- sapply(df$frequency_visiting_canteen, function(freq) match(freq, frequency))
#Export dataframes to csv file
export_encoded_df <- df
write.csv(export_encoded_df, "2nd_encoded_questionnaire_results.csv", row.names = FALSE)
#cat("Unique value for frequency of respondent visit canteen: (after encoding)", paste(unique(df$frequency_visiting_canteen), collapse = ", "), "\n")
cat("Unique value for every likert scale (after encoding): ", paste(unique(df$friendly_staff), collapse = ", "))
df$mean_satisfaction_score <- rowMeans(df[likert_cols], na.rm = TRUE)
#take every column based on their aspects
cols_services <- c("staff_response",
"friendly_staff",
"quick_response_staff",
"order_waiting_time",
"payment_method",
"smooth_payment",
"clear_menu_info")
cols_cleanliness <- c("clean_area",
"cozy_room_layout",
"neat_furniture_placement",
"clean_utensils",
"cleaning_facility",
"proper_table_chair",
"cozy_seating_area")
cols_product <- c("menu_variety",
"healty_menu",
"freshness_menu",
"taste_match_price",
"affordable_price",
"price_vs_quality")
df$mean_services_score <- rowMeans(df[cols_services], na.rm = TRUE) %>% round(digits = 2)
df$mean_cleanliness_score <- rowMeans(df[cols_cleanliness], na.rm = TRUE) %>% round(digits = 2)
df$mean_product_score <- rowMeans(df[cols_product], na.rm = TRUE) %>% round(digits = 2)
#head(df %>% select(ID, major, mean_services_score, mean_cleanliness_score, mean_product_score, mean_satisfaction_score))
datatable(df %>% select(ID, major, mean_services_score, mean_cleanliness_score, mean_product_score, mean_satisfaction_score), caption = "Score per Aspects")
#export to csv file
export_scores_df <- df
write.csv(export_scores_df, "3rd_avg_scores_added_questionnaire_results.csv", row.names = FALSE)
plot_duration_dist <- ggplot(df, aes(x = duration, y = ))+
geom_histogram(fill = "#B4E50D")+
labs(
title = "Distribution of Duration (minutes)",
x = "Durations"
)+
theme_classic()
#show(plot_duration_dist)
ggplotly(plot_duration_dist)
summary(df$duration)
df <- df %>%
mutate(satisfaction_category = case_when(
mean_satisfaction_score <= 1 ~ "Bad",
mean_satisfaction_score > 1 & mean_satisfaction_score <= 3 ~ "Quite Bad",
mean_satisfaction_score > 3 & mean_satisfaction_score < 5 ~ "Good",
mean_satisfaction_score == 5 ~ "Excellent"
))
#export to csv file
export_binning_scores_df <- df
write.csv(export_binning_scores_df, "4th_binning_scores_added_questionnaire_results.csv", row.names = FALSE)
freq_canteen_visit_scheme <- c(
"Bad" = "#F93827",
"Quite Bad" = "#FF9D23",
"Good" = "#B4E50D",
"Excellent" = "#78C841"
)
plot_freq_canteen_visit <- ggplot(df, aes(x = frequency_visiting_canteen, fill = satisfaction_category))+
geom_bar()+
labs(
title = "Canteen Visitors by Frequent Visiting and Satisfaction Category",
x = "Frequency Category"
)+
scale_fill_manual(values = freq_canteen_visit_scheme)+
theme_classic()
#show(plot_freq_canteen_visit)
ggplotly(plot_freq_canteen_visit)
#head(df %>% select(ID, major, mean_satisfaction_score, satisfaction_category))
datatable(df %>% select(ID, major, frequency_visiting_canteen, mean_satisfaction_score, satisfaction_category), caption = "Binning Mean Satisfaction Score Result")
#calculate the total mean of every aspects
aspect_mean_score <- df %>%
summarize(
services = mean(mean_services_score, na.rm= TRUE),
cleanliness = mean(mean_cleanliness_score, na.rm= TRUE),
product = mean(mean_product_score, na.rm= TRUE),
)
#turn the "means" to long format
aspect_mean_score_long <- pivot_longer(aspect_mean_score, everything(), names_to = "Aspect", values_to = "mean_score")
#binning to tell the color identity
aspect_mean_score_long <- aspect_mean_score_long %>%
mutate(
Performance = case_when(
mean_score > 4 ~ "Good",
mean_score >= 3.9 ~ "Medium",
TRUE ~ "Needs Improvement"
)
)
#make a color scheme
peformance_ttl_mean_scheme <- c(
"Needs Improvement" = "#FF9D23",
"Medium" = "#B4E50D",
"Good" = "#78C841"
)
plot_peformance_ttl_mean <- ggplot(aspect_mean_score_long, aes(x = Aspect, y = mean_score, fill = Performance))+
geom_bar(stat = "identity", width = 0.6)+
geom_text(aes(label = round(mean_score, 2)), vjust = -0.5, size = 4)+
labs(
title = "Total Average Canteen Score per Aspect",
x = "Aspects",
y = "Mean Score"
)+
ylim(0, 5) +
scale_fill_manual(values = peformance_ttl_mean_scheme)+
theme_minimal()
#show(plot_peformance_ttl_mean)
ggplotly(plot_peformance_ttl_mean)
#each of the variables name is already declared
#make a long df to combine the multiple column to an each identical column per aspects
df_long_stats <- df %>%
select(all_of(c(cols_services, cols_cleanliness, cols_product))) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "score") %>%
mutate(aspect = case_when(
variable %in% cols_services ~ "service",
variable %in% cols_cleanliness ~ "cleanliness",
variable %in% cols_product ~ "product"
))
#count the stats
df_stats <- df_long_stats %>% group_by(aspect, variable) %>%
summarise(
#I'll round the result to handle the numbers with ease
mean = mean(score, na.rm = TRUE) %>% round(digits = 4),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE) %>% round(digits = 4),
max = max(score, na.rm = TRUE),
min = min(score, na.rm = TRUE)
)
#binning
df_stats <- df_stats %>% mutate(
category = case_when(
mean < 3.5 ~ "Needs Improvement",
mean < 4 ~ "Medium",
TRUE ~ "Good"
)
)
#extract every variable to a new df based on their aspect
services_df <- df_stats %>% filter(aspect =="service")
cleanliness_df <- df_stats %>% filter(aspect =="cleanliness")
product_df <- df_stats %>% filter(aspect =="product")
plot_clean_stat <- ggplot(cleanliness_df, aes(x = variable, y = mean, fill = category))+
geom_col() +
coord_flip() +
facet_wrap(~ aspect, scales = "free_y") +
labs(title = "Average Score per Variable on Cleanliness Aspect",
x = "Variable", y = "Mean Score") +
scale_fill_manual(values = c("Needs Improvement" = "#FF9D23",
"Medium" = "#B4E50D",
"Good" = "#78C841")) +
theme_minimal()
ggplotly(plot_clean_stat)
#show(plot_clean_stat)
plot_product_stat <- ggplot(product_df, aes(x = variable, y = mean, fill = category))+
geom_col() +
coord_flip() +
facet_wrap(~ aspect, scales = "free_y") +
labs(title = "Average Score per Variable on Product Aspect",
x = "Variable", y = "Mean Score") +
scale_fill_manual(values = c("Needs Improvement" = "#FF9D23",
"Medium" = "#B4E50D",
"Good" = "#78C841")) +
theme_minimal()
ggplotly(plot_product_stat)
#show(plot_product_stat)
plot_service_stat <- ggplot(services_df, aes(x = variable, y = mean, fill = category))+
geom_col() +
coord_flip() +
facet_wrap(~ aspect, scales = "free_y") +
labs(title = "Average Score per Variable on Service Aspect",
x = "Variable", y = "Mean Score") +
scale_fill_manual(values = c("Needs Improvement" = "#FF9D23",
"Medium" = "#B4E50D",
"Good" = "#78C841")) +
theme_minimal()
ggplotly(plot_service_stat)
#show(plot_service_stat)
#head(df_stats)
datatable(df_stats, caption = "Statistic Descriptive of Each Variables Based on Their Aspects")
#check unique value in home campus
unique(df$home_campus)
#check how many respondent who inserted "binus@greater jakarta"
sum(df$home_campus == "binus@greater jakarta", na.rm = TRUE)
segment_satis_scheme <- c(
"Bad" = "#F93827",
"Quite Bad" = "#FF9D23",
"Good" = "#B4E50D",
"Excellent" = "#78C841"
)
#plot to count segmentation satisfaction
plot_segment_satis <- ggplot(df, aes(x = home_campus, fill = satisfaction_category))+
geom_bar()+
labs(
title = "Satisfaction per Home Campus Segmentation",
x = "Home Campuses",
y = "Count"
)+
scale_fill_manual(values = segment_satis_scheme)
#show(plot_segment_satis)
ggplotly(plot_segment_satis)
#duplicate the df to new dataframe focusing on mean score per home campuses
mean_satisfaction_home_campus <- df %>%
group_by(home_campus) %>%
summarise(
responses = n(),
service_sd = sd(rowMeans(select(cur_data(), all_of(cols_services)), na.rm = TRUE), na.rm = TRUE) %>% round(3),
cleanliness_sd = sd(rowMeans(select(cur_data(), all_of(cols_cleanliness)), na.rm = TRUE), na.rm = TRUE) %>% round(3),
product_sd = sd(rowMeans(select(cur_data(), all_of(cols_product)), na.rm = TRUE), na.rm = TRUE) %>% round(3),
services_score = mean(mean_services_score) %>% round(digits = 3),
cleanliness_score = mean(mean_cleanliness_score) %>% round(digits = 3),
product_score = mean(mean_product_score) %>% round(digits = 3),
overall_score = mean(mean_satisfaction_score) %>% round(digits = 3)
)
#make the df to long format
long_mean_satisfaction_home_campus <- mean_satisfaction_home_campus %>%
pivot_longer(cols = c(services_score, cleanliness_score, product_score), names_to = "aspect", values_to = "score")
#Binning the score
long_mean_satisfaction_home_campus <- long_mean_satisfaction_home_campus %>% mutate(
category = case_when(
score > 4 ~ "Exellent",
score >= 3.9 ~ "Good",
TRUE ~ "Needs Improvement"
)
)
#make a color scheme
mean_satisfaction_home_campus_scheme <- c(
"services_score" = "#FF9D23",
"cleanliness_score" = "#B4E50D",
"product_score" = "#78C841"
)
plot_satis_aspect_per_home_campus <- ggplot(long_mean_satisfaction_home_campus, aes(x = home_campus, y = score, fill = aspect)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Score per Aspect by Home Campus",
x = "Home Campus", y = "Score") +
scale_fill_manual(values = mean_satisfaction_home_campus_scheme) +
theme_minimal()
#show(plot_satis_aspect_per_home_campus)
ggplotly(plot_satis_aspect_per_home_campus)
#head(mean_satisfaction_home_campus)
datatable(mean_satisfaction_home_campus, caption = "Aspects Score Group by Home Campus")
#check unique value in home campus
unique(df$major)
df <- df %>% mutate(
major_group = case_when(
major %in% c("computer science", "computer science - software engineering", "artificial intelligence", "data science", "cyber security", "computer engineering", "information systems") ~ "Tech",
major %in% c("game application and technology", "interior design") ~ "Design",
major %in% c("digital business", "communication - marketing communication", "public relations") ~ "Business/Communication",
TRUE ~ "others"
)
)
#export to csv file
export_major_grouped_df <- df
write.csv(export_major_grouped_df, "5th_grouped_major_added_questionnaire_results.csv", row.names = FALSE)
#duplicate the df to new dataframe focusin on mean score per major
mean_satisfaction_major <- df %>%
group_by(major_group) %>%
summarise(
responses = n(),
services_score = mean(mean_services_score) %>% round(digits = 3),
service_sd = df %>% select(all_of(cols_services)) %>% rowMeans(na.rm = TRUE) %>% sd(na.rm = TRUE) %>% round(3),
cleanliness_score = mean(mean_cleanliness_score) %>% round(digits = 3),
cleanliness_sd = df %>% select(all_of(cols_cleanliness)) %>% rowMeans(na.rm = TRUE) %>% sd(na.rm = TRUE) %>% round(3),
product_score = mean(mean_product_score) %>% round(digits = 3),
product_sd = df %>% select(all_of(cols_product)) %>% rowMeans(na.rm = TRUE) %>% sd(na.rm = TRUE) %>% round(3),
overall_score = mean(mean_satisfaction_score) %>% round(digits = 3)
)
#make the df to long format
long_mean_satisfaction_major <- mean_satisfaction_major %>%
pivot_longer(cols = c(services_score, cleanliness_score, product_score), names_to = "aspect", values_to = "score")
#Binning the score
long_mean_satisfaction_major <- long_mean_satisfaction_major %>% mutate(
category = case_when(
score > 4 ~ "Exellent",
score >= 3.9 ~ "Good",
TRUE ~ "Needs Improvement"
)
)
#make a color scheme
mean_satisfaction_major_scheme <- c(
"services_score" = "#FF9D23",
"cleanliness_score" = "#B4E50D",
"product_score" = "#78C841"
)
plot_satis_aspect_per_major <- ggplot(long_mean_satisfaction_major, aes(x = major_group, y = score, fill = aspect)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Score per Aspect by Grouped Majors",
x = "Home Campus", y = "Score") +
scale_fill_manual(values = mean_satisfaction_major_scheme) +
theme_minimal()
#show(plot_satis_aspect_per_major)
ggplotly(plot_satis_aspect_per_major)
#head(mean_satisfaction_major)
datatable(mean_satisfaction_major, caption = "Aspects Score by Grouped Majors")
ggplotly(plot_clean_stat)
ggplotly(plot_product_stat)
ggplotly(plot_service_stat)
View(df)
deleted_column <- c("advice_for_services", "cleanliness_advice", "facility_advice", "product_advice")
df <- df %>%
select(-deleted_column)
#check unique value in home campus
unique(df$home_campus)
#check how many respondent who inserted "campus gj"
sum(df$home_campus == "campus gj", na.rm = TRUE)
